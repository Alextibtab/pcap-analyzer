use std::collections::HashMap;

pub fn get_tcp_service(port: u16) -> String {
    match port {
        7 => String::from("Echo"),
        9 => String::from("Discard"),
        11 => String::from("Active Users"),
        13 => String::from("Daytime"),
        17 => String::from("Quote of the Day"),
        19 => String::from("Character Generator"),
        20 => String::from("FTP"),
        21 => String::from("FTP"),
        22 => String::from("SSH"),
        23 => String::from("Telnet"),
        25 => String::from("SMTP"),
        37 => String::from("Time"),
        42 => String::from("Host Name Server"),
        43 => String::from("Whois"),
        49 => String::from("TACACS"),
        53 => String::from("DNS"),
        67 => String::from("DHCP Server"),
        68 => String::from("DHCP Client"),
        69 => String::from("TFTP"),
        70 => String::from("Gopher"),
        79 => String::from("Finger"),
        80 => String::from("HTTP"),
        88 => String::from("Kerberos"),
        101 => String::from("NIC Host Name Server"),
        102 => String::from("ISO-TSAP"),
        107 => String::from("Remote Telnet Service"),
        109 => String::from("POP2"),
        110 => String::from("POP3"),
        115 => String::from("SFTP"),
        118 => String::from("SQL Services"),
        119 => String::from("NNTP"),
        123 => String::from("NTP"),
        137 => String::from("NetBIOS Name Service"),
        138 => String::from("NetBIOS Datagram Service"),
        139 => String::from("NetBIOS Session Service"),
        143 => String::from("IMAP"),
        161 => String::from("SNMP"),
        162 => String::from("SNMP Trap"),
        177 => String::from("XDMCP"),
        179 => String::from("BGP"),
        194 => String::from("IRC"),
        389 => String::from("LDAP"),
        396 => String::from("Novell Netware"),
        443 => String::from("HTTPS"),
        444 => String::from("SNPP"),
        445 => String::from("Microsoft-DS"),
        465 => String::from("SMTPS"),
        513 => String::from("Who"),
        514 => String::from("Syslog"),
        515 => String::from("LPD"),
        520 => String::from("RIP"),
        521 => String::from("RIPng"),
        540 => String::from("UUCP"),
        554 => String::from("RTSP"),
        546 => String::from("DHCPv6 Client"),
        547 => String::from("DHCPv6 Server"),
        587 => String::from("SMTP"),
        631 => String::from("Internet Printing Protocol"),
        636 => String::from("LDAPS"),
        873 => String::from("Rsync"),
        902 => String::from("VMware Server"),
        989 => String::from("FTPS"),
        990 => String::from("FTPS"),
        993 => String::from("IMAPS"),
        995 => String::from("POP3S"),
        1863 => String::from("Microsoft Notification Protocol"),
        2049 => String::from("NFS"),
        _ => format!("Unknown ({})", port),
    }
}

pub fn get_udp_service(port: u16) -> String {
    match port {
        7 => String::from("Echo"),
        9 => String::from("Discard"),
        13 => String::from("Daytime"),
        17 => String::from("Quote of the Day"),
        19 => String::from("Character Generator"),
        37 => String::from("Time"),
        42 => String::from("Host Name Server"),
        49 => String::from("TACACS"),
        53 => String::from("DNS"),
        67 => String::from("DHCP Server"),
        68 => String::from("DHCP Client"),
        69 => String::from("TFTP"),
        123 => String::from("NTP"),
        137 => String::from("NetBIOS Name Service"),
        138 => String::from("NetBIOS Datagram Service"),
        139 => String::from("NetBIOS Session Service"),
        161 => String::from("SNMP"),
        162 => String::from("SNMP Trap"),
        177 => String::from("XDMCP"),
        389 => String::from("LDAP"),
        443 => String::from("HTTPS"),
        445 => String::from("Microsoft-DS"),
        513 => String::from("Who"),
        514 => String::from("Syslog"),
        520 => String::from("RIP"),
        521 => String::from("RIPng"),
        547 => String::from("DHCPv6 Server"),
        623 => String::from("ASF Remote Management and Control Protocol"),
        1863 => String::from("Microsoft Notification Protocol"),
        1900 => String::from("UPnP"),
        2049 => String::from("NFS"),
        5353 => String::from("mDNS"),
        5355 => String::from("LLMNR"),
        5678 => String::from("Remote Replication Agent Connection"),
        5679 => String::from("Direct Cable Connect Manager"),
        5680 => String::from("Canyon Network Discovery"),
        5688 => String::from("GGZ Gaming Zone"),
        5689 => String::from("Qm video"),
        5690 => String::from("Qm video"),
        6000 => String::from("X11"),
        _ => format!("Unknown ({})", port),
    }
}

pub fn update_map(map: &mut HashMap<String, u32>, key: String) {
    let count = map.entry(key).or_insert(0);
    *count += 1;
}
